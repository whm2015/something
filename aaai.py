# -*- coding: utf-8 -*-

import os
import pickle
import math
import itertools
import numpy as np
import copy
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
import matplotlib.transforms as transforms
from scipy.stats import pearsonr


def main():
    shun = [
        [7187, 7231, 9424, 1236, 7419, 7497, 9442],
        [7503, 7512, 7611, 7627, 7648, 7651, 7652],
        [9471, 7701, 9478, 7777, 7802, 7869, 7872],
        [7906, 7936, 10359, 8007, 1335, 8032, 8076],
        [8097, 8113, 3817, 8140, 8141, 89, 393],
        [8739, 8908, 1198, 1209, 1550, 1786, 1970],
        [2160, 2259, 2317, 8602, 2670, 2931, 3434],
        [3645, 4165, 4245, 4266, 4331, 733, 4480],
        [4656, 5154, 5210, 5534, 6012, 9755, 6417],
        [6547, 6769, 7364, 1241, 7758, 4802, 6322]
    ]
    all = []
    for i in range(10):
        tem = np.load(os.path.join(r'C:\Users\isaac\Desktop\diff_predict_2_64\results1', str(i), 'predict_results.npy'))
        trues = [np.isnan(x).any() for x in tem]
        if True in trues:
            index = trues.index(True) - 1
        else:
            index = -1
        all.append(list(tem[index].reshape(7)))
    print(all)
    with open(r'C:\Users\isaac\Desktop\2class_diffi.pkl', 'rb') as f:
        diff = pickle.load(f)
    diff_dict = {}
    for i in diff:
        diff_dict[i[0]] = i[1]
    print(diff_dict)
    pear_sort = []
    for i in range(10):
        x = []
        for j in range(7):
            x.append(diff_dict[shun[i][j]][0])
        tp = pearsonr(x, all[i])[0]
        pear_sort.append((i, tp))
    pear_sort = [y[0] for y in sorted(pear_sort, key=lambda x: x[1], reverse=True)[:7]]
    print(pear_sort)
    # for i in itertools.combinations(pear_sort, 4):
    #     for j in i:
    #         x = []
    #         y = copy.deepcopy(all[j])
    #         for k in range(7):
    #             x.append(diff_dict[shun[j][k]][0])
    #         # for m in range(2):
    #         #     tryevery = []
    #         #     for index in range(len(x)):
    #         #         temb = copy.deepcopy(x)
    #         #         temc = copy.deepcopy(y)
    #         #         del (temb[index])
    #         #         del (temc[index])
    #         #         px, py = pearsonr(temb, temc)
    #         #         tryevery.append((index, px))
    #         #     tryevery.sort(key=lambda z: z[1], reverse=True)
    #         #     del (x[tryevery[0][0]])
    #         #     del (y[tryevery[0][0]])
    #         plt.scatter(x, y)
    #     # plt.show()
    #     plt.savefig('C:\\Users\\isaac\\Desktop\\12\\' + ''.join([str(x) for x in i]) + '.png', format='png')
    #     plt.close()

    pear_sort = [1, 5, 4, 9, 8, 3]
    for j in pear_sort:
        x = []
        y = all[j]
        for k in range(7):
            x.append(diff_dict[shun[j][k]][0])
        plt.scatter(x, y)
        plt.savefig('C:\\Users\\isaac\\Desktop\\13\\' + str(j) + '.png', format='png')
        plt.close()


def main2():
    a0 = [
        (7187, (4.665975850162622, 9.933494, 0.8571428571428571, 7)),
        (7231, (1.05064453347696, 1.1703578, 0.8571428571428571, 7)),
        (9424, (1.312453797880275, 1.8510803, 0.7142857142857143, 7)),
        (1236, (2.1118838924635517, 4.99464, 1.0, 7)),
        (7419, (1.8372656464757051, 2.1582677, 0.7142857142857143, 7)),
        (7497, (1.0908014003218254, 1.0915872, 0.5714285714285714, 7)),
        (9442, (1.48965567870522, 1.7056357, 0.7142857142857143, 7))]
    b0_128 = [4.211118, 10.000961, 9.807938, 1.2078769, 8.894824, 2.4961374, 8.755202]
    b0 = [1.0866408, 10.001, 9.99404, 1.0117137, 9.951681, 1.6919054, 9.948788]

    a1 = [
        (7503, (2.50639346435198, 4.148292, 0.7142857142857143, 7)),
        (7512, (1.7727271273327845, 2.230374, 0.7142857142857143, 7)),
        (7611, (2.5322348572672215, 3.3881893, 0.5714285714285714, 7)),
        (7627, (4.138995919714147, 10.000915, 1.0, 7)),
        (7648, (1.81228220176672, 1.566982, 0.7142857142857143, 7)),
        (7651, (-0.07565185278819357, 0.44657597, 0.8571428571428571, 7)),
        (7652, (0.6953762924005952, 0.6519917, 0.8571428571428571, 7)), ]
    b1_128 = [7.2092137, 0.14536092, 8.092172, 7.261368, 9.837714, 7.9974155, 0.30376747]
    b1 = [9.651452, 0.66039276, 7.4444523, 8.62294, 8.000381, 5.854717, 0.95636696]

    a2 = [
        (9471, (1.8395339682606253, 2.3996105, 0.8571428571428571, 7)),
        (7701, (1.6830750055186574, 1.799282, 0.7142857142857143, 7)),
        (9478, (-0.3046325283466186, 0.3066189, 0.5714285714285714, 7)),
        (7777, (4.354885727036284, 9.967245, 0.8571428571428571, 7)),
        (7802, (1.3940649744167386, 1.2767327, 0.8571428571428571, 7)),
        (7869, (-0.08455937794380786, 0.44953224, 0.8571428571428571, 7)),
        (7872, (0.8329310330569007, 0.6832079, 0.7142857142857143, 7)), ]
    b2_128 = [9.9734955, 9.769714, 6.563947, 1.9505012, 9.886463, 0.28533304, 9.830126]
    b2 = [9.892171, 9.895989, 9.519792, 1.6143959, 9.994077, 0.10495347, 9.99426]

    a3 = [
        (7906, (4.536976998390395, 9.811103, 1.0, 7)),
        (7936, (1.418900523907978, 1.078077, 0.5714285714285714, 7)),
        (10359, (4.181060967234143, 9.979115, 0.8571428571428571, 7)),
        (8007, (1.8461029193732528, 2.2259345, 0.7142857142857143, 7)),
        (1335, (2.0048055177282174, 3.4427767, 0.8571428571428571, 7)),
        (8032, (1.5454205955974263, 1.6517099, 0.7142857142857143, 7)),
        (8076, (1.4851238241125526, 0.95094067, 0.7142857142857143, 7)), ]
    b3_128 = [0.69904065, 7.9900556, 8.485338, 8.965806, 0.35047323, 9.826484, 9.633313]
    b3 = [0.17908558, 2.5711167, 9.81951, 5.0781183, 2.929909, 9.926227, 9.891091]

    a4 = [
        (8097, (0.15343119603021585, 0.48528025, 0.8571428571428571, 7)),
        (8113, (4.43626480278751, 9.89044, 0.7142857142857143, 7)),
        (3817, (0.09264995119121702, 0.45149025, 0.2857142857142857, 7)),
        (8140, (3.940770578710802, 9.959979, 1.0, 7)),
        (8141, (4.449440114425091, 9.996603, 0.8571428571428571, 7)),
        (89, (2.9297722946271176, 5.722217, 0.625, 8)),
        (393, (1.5182139414109626, 2.2292335, 0.875, 8)), ]
    b4_128 = [5.0720563, 9.867295, 9.961796, 1.482513, 9.922493, 9.991005, 1.9637681]
    b4 = [2.507096, 9.329048, 9.732904, 1.9815093, 9.995147, 10.000424, 5.1380835]

    a5 = [
        (8739, (0.2959967807680467, 0.48946092, 0.75, 8)),
        (8908, (0.4951063110127924, 0.59737855, 0.75, 8)),
        (1198, (1.7619981422852375, 2.3860483, 1.0, 8)),
        (1209, (4.436683972600895, 9.9991865, 0.75, 8)),
        (1550, (-0.25343859545167075, 0.28807268, 0.75, 8)),
        (1786, (0.44506597365071593, 0.6809524, 0.625, 8)),
        (1970, (4.635984669859384, 9.891411, 0.875, 8)), ]
    b5_128 = [4.9723854, 5.533436, 9.953427, 9.929156, 0.034986142, 1.8791354, 1.8014683]
    b5 = [2.0418165, 5.0446334, 9.97661, 9.757551, 0.022395974, 5.1790395, 0.63700116]

    a6 = [
        (2160, (1.985056307466605, 2.836236, 0.875, 8)),
        (2259, (1.9116706237458805, 2.6291358, 1.0, 8)),
        (2317, (1.7606398503411032, 2.098689, 0.875, 8)),
        (8602, (0.42950258549353104, 0.61845726, 0.375, 8)),
        (2670, (1.3430729181301246, 1.4585552, 0.625, 8)),
        (2931, (4.460774807263217, 9.915348, 0.875, 8)),
        (3434, (4.490500881903428, 9.997012, 0.875, 8)), ]
    b6_128 = [9.919092, 7.746166, 9.034738, 9.40871, 9.459285, 3.836832, 9.998916]
    b6 = [9.7921715, 9.990432, 9.485808, 8.898292, 7.0974746, 3.6745448, 9.984899]

    a7 = [
        (3645, (2.114805152359495, 2.8352518, 0.75, 8)),
        (4165, (1.622236002762236, 1.6758382, 0.75, 8)),
        (4245, (1.2357132853281265, 1.0827821, 0.75, 8)),
        (4266, (1.3261671315038404, 1.3887049, 0.875, 8)),
        (4331, (0.8833476328851778, 1.6540076, 0.75, 8)),
        (733, (2.8717130926470866, 4.7086625, 0.625, 8)),
        (4480, (1.6943388949014513, 1.5342437, 0.875, 8)), ]
    b7_128 = [9.263125, 9.53361, 2.1462104, 9.4767475, 0.5682286, 0.09045574, 3.7787077]
    b7 = [9.627508, 9.130314, 4.632236, 9.407913, 0.7553209, 0.3653705, 1.5169317]

    a8 = [
        (4656, (3.773305804836428, 10.000923, 1.0, 8)),
        (5154, (0.5881103952451587, 0.7214462, 0.5, 8)),
        (5210, (1.9216977424515485, 2.3087914, 0.75, 8)),
        (5534, (1.8952575098598472, 4.3913355, 1.0, 8)),
        (6012, (4.652638953758366, 9.997671, 0.75, 8)),
        (9755, (4.651218307618854, 9.971461, 0.625, 8)),
        (6417, (1.757482902607237, 2.4079947, 0.75, 8)), ]
    b8_128 = [10.00084, 10.000941, 9.3329, 7.979947, 9.746544, 0.032051373, 0.56425816]
    b8 = [10.000953, 10.000653, 8.7606535, 1.8200052, 9.538612, 0.015162902, 1.3461224]

    a9 = [
        (6547, (1.6571615670280064, 2.271307, 1.0, 8)),
        (6769, (2.040232897328534, 3.0288346, 0.875, 8)),
        (7364, (0.36127973668186625, 0.60752714, 0.625, 8)),
        (1241, (4.447979036015442, 9.939376, 0.25, 8)),
        (7758, (2.0532252826720785, 5.005111, 1.0, 8)),
        (4802, (1.86571581761041, 2.6014123, 0.8888888888888888, 9)),
        (6322, (0.7137872684929408, 0.75592077, 0.7, 10))]
    b9_128 = [7.53286, 8.570766, 9.174802, 9.556339, 5.0151577, 4.0694327, 6.63199]
    b9 = [3.9926186, 8.803733, 9.76429, 6.4849906, 4.9317636, 5.644184, 2.857885]

    a10 = [
        (5493, (3.508165553755333, 8.108627, 1.0, 7)),
        (5505, (1.2730098551459594, 1.4600616, 1.0, 7)),
        (918, (-0.47096660210206504, 10.000892, 0.42857142857142855, 7)),
        (5515, (0.9090002520192865, 0.7646657, 0.8571428571428571, 7)),
        (5529, (2.1549355554118312, 4.287335, 1.0, 7)),
        (5561, (1.9780387357229108, 9.999925, 0.7142857142857143, 7)),
        (9120, (2.6483809486848524, 4.2851696, 0.7142857142857143, 7))]
    b10 = [1.1210201, 0.2233528, 10.000934, 1.2048031, 6.226293, 9.999032, 9.053789]

    a11 = [
        (5658, (-2.985803103804452, 9.99223, 0.42857142857142855, 7)),
        (5686, (0.8501978578670518, 0.710258, 0.5714285714285714, 7)),
        (5693, (3.665789558551814, 9.898236, 0.8571428571428571, 7)),
        (3881, (-1.1022707690983626, 0.09475095, 0.42857142857142855, 7)),
        (5788, (-0.3179402453345081, 1.6763123, 0.8571428571428571, 7)),
        (739, (4.607628525765012, 9.977639, 0.8571428571428571, 7)),
        (5820, (0.8048360963182914, 1.0873617, 0.7142857142857143, 7))]
    b11 = [6.920031, 1.1035181, 4.1163726, 9.992595, 9.931947, 0.9101559, 9.923179]

    a12 = [
        (5821, (0.5042327975854042, 0.5154076, 0.7142857142857143, 7)),
        (5823, (3.27229084141187, 9.881816, 1.0, 7)),
        (9742, (-2.484633867991258, 8.905232, 0.42857142857142855, 7)),
        (5877, (3.9075456945913323, 9.967527, 0.8571428571428571, 7)),
        (5926, (2.223428813712879, 4.71217, 1.0, 7)),
        (5933, (4.286810368044879, 10.000873, 0.8571428571428571, 7)),
        (5999, (0.6453663004550609, 0.6896395, 0.8571428571428571, 7))]
    b12 = [9.955329, 4.03154, 2.722279, 9.799528, 5.483024, 8.24285, 4.07306]

    a13 = [
        (6069, (-0.2186425613333855, 0.22437117, 0.7142857142857143, 7)),
        (6102, (2.6465090071721264, 4.477584, 0.7142857142857143, 7)),
        (1017, (2.452454459144013, 5.713127, 0.7142857142857143, 7)),
        (6121, (-2.9469157931506063, 9.915554, 0.42857142857142855, 7)),
        (6151, (0.7254151909640242, 0.8442845, 0.7142857142857143, 7)),
        (6215, (0.4946852800812959, 0.78975755, 0.5714285714285714, 7)),
        (6223, (1.8171118898980483, 2.2722633, 0.7142857142857143, 7))]
    b13 = [0.9332121, 0.031269155, 9.878772, 8.914716, 5.762668, 1.9772253, 4.486737]

    a14 = [
        (6228, (4.337166839532491, 9.854388, 0.8571428571428571, 7)),
        (6246, (-0.09491661930918559, 0.39031237, 0.8571428571428571, 7)),
        (6268, (3.885877966241741, 9.999845, 0.8571428571428571, 7)),
        (6278, (-0.3396900962915913, 0.42729595, 0.5714285714285714, 7)),
        (6292, (4.614142076206436, 9.995792, 0.8571428571428571, 7)),
        (1847, (-1.9842070607609334, 9.795468, 0.7142857142857143, 7)),
        (6328, (4.438868571204314, 9.998739, 0.7142857142857143, 7))]
    b14 = [5.087834, 9.991136, 8.526186, 2.4452846, 9.957238, 5.8246245, 9.982247]

    a15 = [
        (6330, (0.25823399892959364, 0.592956, 0.8571428571428571, 7)),
        (6337, (0.31444276428850326, 0.612685, 0.7142857142857143, 7)),
        (6390, (1.5353138642830761, 1.6958462, 0.8571428571428571, 7)),
        (6413, (4.653554039792701, 9.962692, 0.8571428571428571, 7)),
        (6423, (-0.5370204080832836, 0.15690768, 0.7142857142857143, 7)),
        (6454, (-0.8651781158058597, 2.655181, 0.7142857142857143, 7)),
        (6473, (4.44112993477188, 9.978493, 0.7142857142857143, 7))]
    b15 = [0.4595291, 1.323582, 0.053836763, 0.7034068, 0.25349236, 9.999579, 5.5272107]

    a16 = [
        (6496, (1.4155483384849472, 1.7019197, 0.8571428571428571, 7)),
        (6506, (2.197110193607863, 5.525494, 1.0, 7)),
        (6537, (1.44625551393828, 1.4679817, 0.8571428571428571, 7)),
        (6550, (0.017701155698565757, 0.4022377, 0.5714285714285714, 7)),
        (6577, (1.7520124691893313, 2.1894875, 0.8571428571428571, 7)),
        (6578, (1.9326273538564551, 2.1781745, 0.5714285714285714, 7)),
        (1101, (3.6146702007231926, 9.996114, 1.0, 7))]
    b16 = [1.3798944, 8.890937, 1.7668325, 1.5925642, 9.905025, 4.936728, 6.5289493]

    a17 = [
        (6640, (0.32514248607299007, 0.58869654, 0.7142857142857143, 7)),
        (6666, (2.774657391959263, 8.643128, 1.0, 7)),
        (6700, (4.2814859072066165, 9.976352, 0.8571428571428571, 7)),
        (9314, (-0.07757222198809359, 0.38768327, 0.5714285714285714, 7)),
        (6745, (4.608497480418475, 9.846315, 0.8571428571428571, 7)),
        (6764, (-0.19378367640838717, 0.43072563, 0.5714285714285714, 7)),
        (6798, (1.2877402670242666, 1.5066152, 0.8571428571428571, 7))]
    b17 = [9.8236475, 0.5147002, 3.2706459, 0.10918347, 3.3669956, 0.52180594, 9.945493]

    a18 = [
        (6862, (-0.858622005233719, 0.058910612, 0.42857142857142855, 7)),
        (6877, (1.283357915604121, 1.2052476, 0.5714285714285714, 7)),
        (6882, (1.7110935383823056, 9.997782, 1.0, 7)),
        (6898, (1.4407689591127901, 1.8395996, 0.8571428571428571, 7)),
        (6924, (-0.09857413910351608, 9.849248, 0.5714285714285714, 7)),
        (6939, (0.628197988945954, 0.765768, 0.7142857142857143, 7)),
        (6984, (-0.4135069201242944, 0.41475707, 0.7142857142857143, 7)), ]
    b18 = [6.064614, 2.9469285, 9.986604, 0.7728256, 9.732247, 0.7355403, 8.223445]

    a19 = [
        (7016, (4.521276882300668, 9.973205, 0.8571428571428571, 7)),
        (7021, (-2.2663515575046476, 9.995127, 0.42857142857142855, 7)),
        (7023, (0.583618699519364, 0.6766841, 0.8571428571428571, 7)),
        (7066, (2.2923622962195593, 9.217696, 0.8571428571428571, 7)),
        (7074, (0.3717040604847944, 0.7478886, 0.7142857142857143, 7)),
        (7104, (-0.170193152441614, 9.495821, 0.8571428571428571, 7)),
        (7123, (0.7660473681752497, 0.6562723, 0.8571428571428571, 7))]
    b19 = [3.890102, 9.835117, 9.283328, 7.9180903, 1.0663133, 1.3714426, 5.1168766]

    c = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19]
    d = [b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19]
    e = [b0_128, b1_128, b2_128, b3_128, b4_128, b5_128, b6_128, b7_128, b8_128, b9_128]
    # c = [a4, a5, a9, a12]
    # d = [b4, b5, b9, b12]

    for index, k in enumerate(zip(c, d)):
        i = k[0]
        j = k[1]
        plt.xlim(-4, 6)
        plt.ylim(-1, 11)
        print([x[1][0] for x in i], j)
        plt.scatter([x[1][0] for x in i], j)
        plt.savefig('C:\\Users\\isaac\\Desktop\\2分类我们和glad固定坐标\\' + str(index) + '.png', format='png')
        plt.close()



def main10():
    a6 = [
        ('classical.00056.mp3', (0.9901617750425615, 2.0552547, 0.8333333333333334, 6)),
        ('classical.00019.mp3', (1.9564983430273624, 2.197589, 0.6666666666666666, 6)),
        ('disco.00008.mp3', (3.407094522046295, 2.743755, 0.8333333333333334, 6)),
        ('jazz.00063.mp3', (4.257744824076412, 3.753357, 0.6666666666666666, 6)),
        ('pop.00094.mp3', (3.411793256998652, 2.6535165, 0.6666666666666666, 6)),
        ('classical.00048.mp3', (1.9564983430273624, 1.6229646, 0.6666666666666666, 6)),
        ('jazz.00067.mp3', (-1.337999420955262, 1.8406354, 0.5, 6))]
    b6 = [3.3378634, 5.63103, 5.365411, 3.9196696, 2.1001518, 7.1884665, 2.413565]

    a5 = [
        ('metal.00058.mp3', (0.8148403565688415, 1.8864926, 0.14285714285714285, 7)),
        ('metal.00087.mp3', (-0.5009956691645988, 2.4711273, 0.42857142857142855, 7)),
        ('classical.00052.mp3', (-0.7909936618954516, 1.3920208, 0.8571428571428571, 7)),
        ('disco.00088.mp3', (6.001011428528136, 3.6046486, 0.5714285714285714, 7)),
        ('country.00006.mp3', (3.4118658036514504, 2.9955297, 0.5714285714285714, 7)),
        ('metal.00031.mp3', (-1.825372801236366, 0.90139437, 0.2857142857142857, 7)),
        ('rock.00079.mp3', (-1.3886868051826895, 1.7550157, 0.42857142857142855, 7))]
    b5 = [3.563189, 3.6170306, 0.8670921, 3.692739, 1.1787429, 3.6341116, 2.236479]

    a4 = [
        ('jazz.00083.mp3', (4.862929361840961, 4.7413325, 0.42857142857142855, 7)),
        ('classical.00043.mp3', (0.4704705381478776, 1.6392916, 0.7142857142857143, 7)),
        ('metal.00084.mp3', (0.6814999582874546, 1.6772828, 0.0, 7)),
        ('hiphop.00091.mp3', (3.407173538947096, 2.3527157, 0.5714285714285714, 7)),
        ('metal.00007.mp3', (-0.4077641937702615, 2.4193158, 0.42857142857142855, 7)),
        ('metal.00052.mp3', (-2.115495168199779, 1.1036841, 0.2857142857142857, 7)),
        ('rock.00009.mp3', (-1.074920695059385, 1.2101713, 0.2857142857142857, 7))]
    b4 = [3.650241, 3.018643, 4.368631, 2.4869049, 5.7304935, 2.26492, 3.5364578]

    a3 = [
        ('hiphop.00025.mp3', (3.407134710160069, 3.5083516, 0.5714285714285714, 7)),
        ('hiphop.00036.mp3', (-0.956151953921739, 0.56152064, 0.8571428571428571, 7)),
        ('metal.00005.mp3', (-0.8997635841157196, 1.6508572, 0.5714285714285714, 7)),
        ('rock.00005.mp3', (3.7707120238607508, 4.75611, 0.7142857142857143, 7)),
        ('disco.00045.mp3', (3.7686646758559923, 2.9600549, 0.5714285714285714, 7)),
        ('jazz.00078.mp3', (3.4073016916017447, 2.4128957, 0.5714285714285714, 7)),
        ('classical.00055.mp3', (1.0531615255844748, 1.5256444, 0.7142857142857143, 7))]
    b3 = [1.4749205, 0.929033, 1.8725094, 2.5767083, 1.2235237, 1.9888525, 1.0044196]

    a2 = [
        ('jazz.00056.mp3', (3.4518701838241648, 2.6518614, 0.5714285714285714, 7)),
        ('pop.00070.mp3', (-0.5471345741625517, 1.1114266, 0.14285714285714285, 7)),
        ('classical.00064.mp3', (5.406803587741076, 4.3173485, 0.5714285714285714, 7)),
        ('classical.00047.mp3', (3.4118395566911612, 2.4449434, 0.5714285714285714, 7)),
        ('metal.00014.mp3', (-0.7067748277332901, 1.0505474, 0.7142857142857143, 7)),
        ('blues.00075.mp3', (-0.2620538229227109, 1.1644614, 0.42857142857142855, 7)),
        ('pop.00028.mp3', (3.4117956062087487, 3.0621, 0.5714285714285714, 7))]
    b2 = [5.1329546, 2.170924, 1.3610879, 2.5989513, 3.8408475, 1.8863115, 2.4291532]

    a1 = [
        ('rock.00085.mp3', (-5.042019322629769, 0.87076473, 0.2857142857142857, 7)),
        ('metal.00018.mp3', (3.4071719226001234, 3.842626, 0.5714285714285714, 7)),
        ('blues.00025.mp3', (-1.713334043458703, 0.4293756, 0.8571428571428571, 7)),
        ('reggae.00064.mp3', (3.407188225272765, 2.3066418, 0.5714285714285714, 7)),
        ('blues.00042.mp3', (0.9162412340798115, 1.3549763, 0.5714285714285714, 7)),
        ('rock.00001.mp3', (-5.069944469255867, 1.1309365, 0.5714285714285714, 7)),
        ('blues.00045.mp3', (-2.0603583870631312, 1.3952483, 0.14285714285714285, 7))]
    b1 = [1.3647243, 3.05411, 0.21766801, 2.0689352, 2.0250635, 2.500733, 1.6135966]

    a10 = [
        ('hiphop.00093.mp3', (0.9425522799562548, 1.889939, 0.8333333333333334, 6)),
        ('classical.00070.mp3', (0.6988948688928155, 0.98627883, 0.8333333333333334, 6)),
        ('blues.00089.mp3', (3.770677818577684, 0.50882745, 0.8333333333333334, 6)),
        ('disco.00037.mp3', (2.940797528460327, 2.951337, 0.6666666666666666, 6)),
        ('jazz.00089.mp3', (1.4751502558665033, 1.4833709, 0.8333333333333334, 6)),
        ('classical.00075.mp3', (-1.862139195841008, 0.7063009, 0.8333333333333334, 6)),
        ('rock.00054.mp3', (0.16611550592590488, 3.3237822, 0.16666666666666666, 6))]
    b10 = [8.007174, 9.212222, 7.7447257, 9.370063, 2.4781678, 0.051426478, 3.2688565]

    a11 = [
        ('blues.00076.mp3', (-5.4169733872781025, 1.2814964, 0.6666666666666666, 6)),
        ('classical.00008.mp3', (-2.0921751745839146, 0.77677816, 0.8333333333333334, 6)),
        ('rock.00017.mp3', (3.7686086196245583, 1.6820968, 0.6666666666666666, 6)),
        ('country.00014.mp3', (4.257665977169573, 3.631897, 0.6666666666666666, 6)),
        ('hiphop.00041.mp3', (2.700569867600356, 0.9654789, 0.8333333333333334, 6)),
        ('hiphop.00009.mp3', (-2.0027576704717434, 2.1593115, 0.8333333333333334, 6)),
        ('blues.00038.mp3', (-3.8524597398492317, 1.0097169, 0.5, 6))]
    b11 = [0.6707713, 2.9309144, 0.9847012, 1.3893447, 2.81695, 2.6461573, 0.72061694]

    a12 = [
        ('jazz.00062.mp3', (0.9901618753936393, 1.2829397, 0.8333333333333334, 6)),
        ('jazz.00010.mp3', (1.9722126313510138, 0.4652494, 0.5, 6)),
        ('pop.00030.mp3', (3.411793260574253, 3.5930667, 0.6666666666666666, 6)),
        ('pop.00088.mp3', (0.3018503007563992, 9.032165, 0.5, 6)),
        ('rock.00021.mp3', (1.9966796722587026, 2.2417428, 0.16666666666666666, 6)),
        ('classical.00090.mp3', (2.2373310290460275, 3.611345, 0.6666666666666666, 6)),
        ('reggae.00073.mp3', (-1.0839479022751637, 3.302474, 0.0, 6))]
    b12 = [2.408401, 1.1382824, 3.0092525, 1.5686563, 1.6222388, 1.8596805, 7.5580845]

    a13 = [
        ('rock.00051.mp3', (-4.393150621434163, 3.2784014, 0.16666666666666666, 6)),
        ('disco.00044.mp3', (4.258918271016281, 4.852382, 0.6666666666666666, 6)),
        ('rock.00092.mp3', (0.2320608106853457, 2.49886, 0.16666666666666666, 6)),
        ('disco.00048.mp3', (2.700569867600356, 1.3317685, 0.8333333333333334, 6)),
        ('classical.00034.mp3', (-2.3364075691178994, 0.35274762, 1.0, 6)),
        ('rock.00055.mp3', (0.23206081068904835, 2.7519782, 0.0, 6)),
        ('reggae.00037.mp3', (2.688997144173538, 4.623448, 0.6666666666666666, 6))]
    b13 = [0.7978702, 4.4372563, 2.5659854, 2.0841138, 1.2343193, 2.6783605, 8.790713]

    a14 = [
        ('classical.00000.mp3', (3.4502012133020954, 2.59755, 0.8333333333333334, 6)),
        ('metal.00059.mp3', (-1.5603741018084492, 1.4480993, 0.5, 6)),
        ('country.00090.mp3', (3.4214164939903804, 2.211688, 0.6666666666666666, 6)),
        ('metal.00029.mp3', (-0.7766249409438709, 4.654679, 0.14285714285714285, 7)),
        ('classical.00057.mp3', (4.094378238960014, 1.7239012, 0.7142857142857143, 7)),
        ('reggae.00018.mp3', (3.407135655362566, 1.4389232, 0.5714285714285714, 7)),
        ('pop.00086.mp3', (3.76866510956774, 6.140799, 0.5714285714285714, 7))]
    b14 = [2.1028092, 2.7656252, 1.0746955, 1.4405931, 1.3385409, 1.8203835, 4.497254]

    a15 = [
        ('disco.00087.mp3', (-1.1833639615267373, 2.533722, 0.42857142857142855, 7)),
        ('reggae.00095.mp3', (-5.457552640058183, 1.4492408, 0.14285714285714285, 7)),
        ('disco.00020.mp3', (-4.7006038596627855, 2.8602362, 0.0, 7)),
        ('reggae.00007.mp3', (5.406803587741076, 2.0655909, 0.5714285714285714, 7)),
        ('blues.00023.mp3', (1.971451246518666, 0.82021564, 0.5714285714285714, 7)),
        ('hiphop.00054.mp3', (2.430193094451623, 4.254912, 0.7142857142857143, 7)),
        ('metal.00099.mp3', (-1.3549387823648233, 2.61073, 0.14285714285714285, 7))]
    b15 = [2.0832832, 2.0127816, 2.860351, 3.0172687, 1.6747774, 2.0930958, 3.0130036]

    a16 = [
        ('reggae.00053.mp3', (3.450123706124497, 1.7162758, 0.5714285714285714, 7)),
        ('reggae.00065.mp3', (3.407170945027772, 1.9984809, 0.5714285714285714, 7)),
        ('blues.00067.mp3', (0.13525967735387862, 7.705809, 0.42857142857142855, 7)),
        ('rock.00084.mp3', (-3.092646692556618, 3.465485, 0.2857142857142857, 7)),
        ('hiphop.00081.mp3', (3.411843077755211, 1.1558095, 0.5714285714285714, 7)),
        ('metal.00057.mp3', (0.7291979651802297, 0.8581037, 0.42857142857142855, 7)),
        ('jazz.00093.mp3', (5.515148185355383, 2.5946033, 0.5714285714285714, 7))]
    b16 = [1.03885, 1.1150882, 7.3003, 2.3448272, 0.737107, 1.4947537, 2.621602]

    a17 = [
        ('metal.00070.mp3', (5.447110566628485, 1.8244708, 0.0, 7)),
        ('jazz.00031.mp3', (2.802291403401095, 1.5684088, 0.42857142857142855, 7)),
        ('pop.00037.mp3', (-0.13928472516421478, 2.8763885, 0.42857142857142855, 7)),
        ('metal.00069.mp3', (3.4118002265627263, 0.7069341, 0.0, 7)),
        ('blues.00051.mp3', (-1.5738001227070548, 2.8986793, 0.14285714285714285, 7)),
        ('reggae.00029.mp3', (3.4213496509461505, 0.9345887, 0.5714285714285714, 7)),
        ('classical.00021.mp3', (3.411798255886065, 1.9496211, 0.5714285714285714, 7))]
    b17 = [1.0264386, 2.4828992, 2.3503478, 1.0915638, 1.4138931, 0.9303443, 2.5830564]

    a18 = [
        ('metal.00003.mp3', (-0.10346602911753895, 3.7043815, 0.5714285714285714, 7)),
        ('blues.00071.mp3', (-0.4154342232787303, 4.96265, 0.2857142857142857, 7)),
        ('blues.00000.mp3', (-3.292000804292834, 2.434092, 0.42857142857142855, 7)),
        ('rock.00030.mp3', (1.45789109045149, 4.2090917, 0.42857142857142855, 7)),
        ('rock.00002.mp3', (-3.3731112322330428, 2.479909, 0.0, 7)),
        ('disco.00038.mp3', (-2.971499570315228, 1.9471599, 0.2857142857142857, 7)),
        ('hiphop.00078.mp3', (5.447110566628485, 1.592978, 0.5714285714285714, 7))]
    b18 = [5.5178385, 3.4886541, 3.5177314, 2.804656, 1.985443, 2.2064753, 1.023393]

    a19 = [
        ('pop.00095.mp3', (5.447103202409577, 1.9796847, 0.5714285714285714, 7)),
        ('blues.00078.mp3', (-4.662803696203372, 2.1188133, 0.2857142857142857, 7)),
        ('rock.00078.mp3', (-4.321493582624374, 3.6176622, 0.0, 7)),
        ('metal.00091.mp3', (0.9403969890612313, 3.564127, 0.14285714285714285, 7)),
        ('country.00027.mp3', (-3.4291738584310534, 1.7567611, 0.42857142857142855, 7)),
        ('country.00058.mp3', (3.411828522656574, 1.7017637, 0.5714285714285714, 7)),
        ('jazz.00043.mp3', (3.7124017280843273, 10.001, 0.7142857142857143, 7))]
    b19 = [1.6104258, 5.273712, 9.984727, 1.5330455, 3.6591082, 1.0334435, 10.001]

    c = [a1, a2, a3, a4, a5, a6, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19]
    d = [b1, b2, b3, b4, b5, b6, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19]
    # c = [a1, a2, a4, a6, a10, a13]
    # d = [b1, b2, b4, b6, b10, b13]
    # c = [a1]
    # d = [b1]

    colors = ['r', 'g', 'b', 'y', 'm', 'c'] * 4
    markers = ['o', ] * 6 + ['+', ] * 6 + ['*', ] * 6 + ['+', ] * 6
    plt.xlim(-5, 50)
    # plt.ylim(-1, 11)
    for index, k in enumerate(zip(c, d)):
        i = k[0]
        j = k[1]
        plt.scatter([math.exp(x[1][0]) for x in i], j, c=colors[index], marker=markers[index])
    plt.savefig('C:\\Users\\isaac\\Desktop\\10分类acc\\' + 'glad.png', format='png', dpi=300)
    plt.close()


def main_new_2():
    number_index = [
        [8144, 4802, 500, 1343],
        [4110, 7039, 8802, 7402],
        [8169, 4802, 8802, 2744],
        [6547, 8169, 7852, 7932],
        [8169, 4802, 5145, 4968],
        [7758, 7039, 1343, 7371],
        [7039, 2931, 7165, 2744],
        [2699, 1353, 8024, 7738],
        [1353, 8576, 7852, 4752],
        [4266, 8122, 5023, 4752],
        [8186, 6839, 7402, 4752],
        [8144, 7758, 8084, 7932],
        [6769, 8141, 7852, 7402],
        [2931, 3434, 5023, 7371],
        [2699, 8163, 7738, 1248],
        [4110, 7758, 7165, 7519],
        [8097, 8127, 6466, 7165],
        [5534, 1353, 7932, 1343],
        [8141, 8097, 5145, 7374],
        [4110, 2931, 7593, 1343],
        [8576, 4802, 1343, 8802],
        [4266, 8179, 1248, 7374],
        [4266, 3434, 5967, 7371],
        [1353, 2931, 7328, 4752],
        [4480, 2931, 4752, 7593],
        [8144, 3434, 7374, 8084],
        [1335, 8144, 8084, 7371],
        [8179, 8576, 8084, 7519],
        [4802, 8576, 8134, 5023],
        [8186, 3434, 5967, 7519],
    ]
    with open(r'C:\Users\isaac\Desktop\2class_diffi.pkl', 'rb') as f:
        diff = pickle.load(f)
    print(type(diff))
    diff_dict = {}
    for i in diff:
        diff_dict[i[0]] = i[1]
    for index, i in enumerate(range(20, 50)):
        this_file = os.path.join(r'C:\Users\isaac\Desktop\难度预测\results3', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff = np.load(this_file)
        nan_index = [np.isnan(x).any() for x in predict_diff]
        if True in nan_index:
            nonan_index = nan_index.index(True) - 1
        else:
            nonan_index = -1
        print(i, nonan_index)
        print(predict_diff[nonan_index].reshape(4))

        plt.xlim(-0.1, 1.1)
        plt.ylim(-1, 11)
        plt.scatter([diff_dict[x][2] for x in number_index[index]], predict_diff[nonan_index].reshape(4),)
        plt.savefig('C:\\Users\\isaac\\Desktop\\2分类难度预测\\' + str(i) + 'glad.png', format='png', dpi=300)
        plt.close()


def main_new_10():
    number_index = [
        [443, 491, 655, 478],
        [422, 431, 596, 22],
        [627, 540, 483, 62],
        [622, 551, 655, 24],
        [34, 443, 61, 519],
        [551, 34, 576, 519],
        [680, 540, 604, 562],
        [638, 40, 604, 7],
        [505, 580, 639, 677],
        [680, 523, 596, 655],
        [540, 464, 61, 22],
        [540, 627, 96, 519],
        [540, 551, 483, 90],
        [557, 551, 15, 96],
        [107, 431, 673, 96],
        [40, 621, 576, 62],
        [557, 621, 440, 613],
        [107, 580, 446, 96],
        [505, 551, 673, 596],
        [622, 680, 15, 519],
        [523, 107, 604, 7],
        [443, 557, 15, 61],
        [602, 491, 478, 483],
        [107, 422, 24, 483],
        [554, 443, 562, 15],
        [554, 491, 576, 613],
        [431, 107, 22, 576],
        [602, 34, 562, 596],
        [551, 557, 576, 673],
        [464, 680, 478, 613],
    ]
    with open(r'C:\Users\isaac\Desktop\10class_diffi.pkl', 'rb') as f:
        diff = pickle.load(f)
    print(type(diff))
    diff_dict = {}
    for i in diff:
        diff_dict[i[0]] = i[1]
    music_data = np.load(r'C:\Users\isaac\Desktop\music_data.npz')
    train_data_name = music_data['train_data_name']
    for index, i in enumerate(range(20, 50)):
        this_file = os.path.join(r'C:\Users\isaac\Desktop\难度预测\results4', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff = np.load(this_file)
        nan_index = [np.isnan(x).any() for x in predict_diff]
        if True in nan_index:
            nonan_index = nan_index.index(True) - 1
        else:
            nonan_index = -1
        print(i, nonan_index)
        print(predict_diff[nonan_index].reshape(4))

        plt.xlim(-0.1, 1.1)
        plt.ylim(-1, 11)
        plt.scatter([diff_dict[train_data_name[x]][2] for x in sorted(number_index[index], reverse=True)], predict_diff[nonan_index].reshape(4),)
        plt.savefig('C:\\Users\\isaac\\Desktop\\10分类难度预测\\' + str(i) + 'glad.png', format='png', dpi=300)
        plt.close()


def main2_50():
    number_index = [
        [5658, 4714, 8141, 8232],
        [4440, 3250, 3939, 2872],
        [5658, 1526, 7627, 741],
        [3255, 4231, 3339, 741],
        [8159, 3455, 1970, 5465],
        [6121, 3250, 7016, 1209],
        [8579, 3455, 2872, 1552],
        [4714, 9708, 8232, 10004],
        [4776, 2237, 3774, 2509],
        [3250, 4440, 1645, 7906],
        [8159, 244, 7144, 10402],
        [2037, 5458, 2499, 988],
        [7013, 8579, 5467, 8113],
        [4440, 285, 1257, 6700],
        [9708, 1232, 3814, 3109],
        [5458, 4440, 3814, 23],
        [2704, 8579, 7627, 1792],
        [1367, 6121, 733, 526],
        [1526, 7021, 8113, 3109],
        [3250, 5317, 8141, 4656],
        [3455, 8469, 5465, 988],
        [8350, 8469, 4530, 7144],
        [244, 1232, 1257, 4656],
        [8350, 2658, 741, 5693],
        [3455, 2056, 3630, 3109],
        [6500, 2458, 6292, 650],
        [6500, 4440, 6012, 3774],
        [4082, 5205, 8141, 7016],
        [8350, 4776, 1552, 4112],
        [8350, 5205, 3939, 4112],
        [9925, 5539, 741, 1257],
        [3455, 2704, 733, 10004],
        [9708, 2704, 3075, 5465],
        [244, 4231, 5467, 741],
        [8579, 3455, 6473, 1792],
        [5658, 8802, 568, 5465],
        [3455, 8350, 1792, 8113],
        [244, 3250, 3774, 6700],
        [2037, 2698, 1970, 526],
        [7021, 8159, 3814, 6012],
        [5458, 6121, 2499, 23],
        [285, 2153, 6292, 4550],
        [6121, 5539, 1257, 1209],
        [3042, 7013, 7144, 650],
        [4082, 9295, 7627, 4550],
        [9742, 3255, 6292, 8232],
        [1554, 7021, 6413, 3306],
        [2056, 2458, 1356, 650],
        [1232, 1367, 3075, 568],
        [7021, 2704, 526, 6413],
    ]
    with open(r'C:\Users\isaac\Desktop\2class_diffi.pkl', 'rb') as f:
        diff = pickle.load(f)
    print(type(diff))
    diff_dict = {}
    for i in diff:
        diff_dict[i[0]] = i[1]
    for index, i in enumerate(range(50, 100)):
        if i not in [50, 65, 70, 85]:
            continue
        this_file = os.path.join(r'C:\Users\isaac\Desktop\50组难度预测新参数\2\results5', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff = np.load(this_file)
        nan_index = [np.isnan(x).any() for x in predict_diff]
        if True in nan_index:
            nonan_index = nan_index.index(True) - 1
        else:
            nonan_index = -1
        print(i, nonan_index)
        print(predict_diff[nonan_index].reshape(4))

        plt.xlim(-10, 300)
        plt.ylim(-1, 510)
        plt.scatter([math.exp(diff_dict[x][0]) for x in number_index[index]], predict_diff[nonan_index].reshape(4),)
    plt.savefig('C:\\Users\\isaac\\Desktop\\50组新参数难度图\\2\\' + str(i) + 'zong.png', format='png', dpi=300)
    plt.close()


def main10_50():
    number_index = [
        [595, 564, 306, 82],
        [576, 106, 94, 11],
        [479, 467, 463, 93],
        [511, 110, 87, 11],
        [679, 97, 92, 80],
        [604, 104, 91, 22],
        [308, 244, 79, 74],
        [673, 604, 527, 130],
        [677, 633, 79, 78],
        [554, 530, 520, 157],
        [640, 544, 157, 53],
        [677, 673, 493, 51],
        [673, 157, 98, 94],
        [637, 595, 530, 104],
        [585, 511, 308, 97],
        [677, 82, 67, 65],
        [539, 467, 434, 104],
        [595, 546, 466, 97],
        [530, 308, 110, 98],
        [653, 612, 494, 63],
        [633, 596, 491, 67],
        [554, 472, 467, 90],
        [554, 130, 103, 53],
        [666, 653, 306, 130],
        [493, 467, 105, 51],
        [585, 532, 520, 357],
        [544, 308, 93, 90],
        [490, 147, 104, 93],
        [673, 463, 105, 92],
        [679, 673, 130, 82],
        [637, 532, 490, 82],
        [633, 631, 493, 104],
        [663, 604, 493, 102],
        [244, 78, 63, 51],
        [244, 157, 97, 78],
        [612, 212, 73, 68],
        [673, 653, 612, 8],
        [600, 564, 467, 80],
        [637, 439, 98, 11],
        [640, 383, 145, 91],
        [103, 90, 11, 8],
        [640, 434, 94, 78],
        [673, 306, 78, 63],
        [640, 595, 463, 67],
        [545, 544, 483, 75],
        [663, 479, 308, 157],
        [631, 147, 97, 10],
        [633, 545, 102, 74],
        [434, 229, 97, 80],
        [546, 391, 308, 68],
    ]
    with open(r'C:\Users\isaac\Desktop\10class_diffi.pkl', 'rb') as f:
        diff = pickle.load(f)
    print(type(diff))
    diff_dict = {}
    for i in diff:
        diff_dict[i[0]] = i[1]
    music_data = np.load(r'C:\Users\isaac\Desktop\music_data.npz')
    train_data_name = music_data['train_data_name']
    for index, i in enumerate(range(50, 100)):
        if i not in [55, 65, 77, 82]:
            continue
        this_file = os.path.join(r'C:\Users\isaac\Desktop\50组难度预测新参数\10\results6', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff = np.load(this_file)
        nan_index = [np.isnan(x).any() for x in predict_diff]
        if True in nan_index:
            nonan_index = nan_index.index(True) - 1
        else:
            nonan_index = -1
        print(i, nonan_index)
        print(predict_diff[nonan_index].reshape(4))

        plt.xlim(-10, 300)
        plt.ylim(-1, 510)
        plt.scatter([math.exp(diff_dict[train_data_name[x]][0]) for x in number_index[index]], predict_diff[nonan_index].reshape(4),)
    plt.savefig('C:\\Users\\isaac\\Desktop\\50组新参数难度图\\10\\' + str(i) + 'zong.png', format='png', dpi=300)
    plt.close()


def all_50():
    number_index_2 = [
        [5658, 4714, 8141, 8232],
        [4440, 3250, 3939, 2872],
        [5658, 1526, 7627, 741],
        [3255, 4231, 3339, 741],
        [8159, 3455, 1970, 5465],
        [6121, 3250, 7016, 1209],
        [8579, 3455, 2872, 1552],
        [4714, 9708, 8232, 10004],
        [4776, 2237, 3774, 2509],
        [3250, 4440, 1645, 7906],
        [8159, 244, 7144, 10402],
        [2037, 5458, 2499, 988],
        [7013, 8579, 5467, 8113],
        [4440, 285, 1257, 6700],
        [9708, 1232, 3814, 3109],
        [5458, 4440, 3814, 23],
        [2704, 8579, 7627, 1792],
        [1367, 6121, 733, 526],
        [1526, 7021, 8113, 3109],
        [3250, 5317, 8141, 4656],
        [3455, 8469, 5465, 988],
        [8350, 8469, 4530, 7144],
        [244, 1232, 1257, 4656],
        [8350, 2658, 741, 5693],
        [3455, 2056, 3630, 3109],
        [6500, 2458, 6292, 650],
        [6500, 4440, 6012, 3774],
        [4082, 5205, 8141, 7016],
        [8350, 4776, 1552, 4112],
        [8350, 5205, 3939, 4112],
        [9925, 5539, 741, 1257],
        [3455, 2704, 733, 10004],
        [9708, 2704, 3075, 5465],
        [244, 4231, 5467, 741],
        [8579, 3455, 6473, 1792],
        [5658, 8802, 568, 5465],
        [3455, 8350, 1792, 8113],
        [244, 3250, 3774, 6700],
        [2037, 2698, 1970, 526],
        [7021, 8159, 3814, 6012],
        [5458, 6121, 2499, 23],
        [285, 2153, 6292, 4550],
        [6121, 5539, 1257, 1209],
        [3042, 7013, 7144, 650],
        [4082, 9295, 7627, 4550],
        [9742, 3255, 6292, 8232],
        [1554, 7021, 6413, 3306],
        [2056, 2458, 1356, 650],
        [1232, 1367, 3075, 568],
        [7021, 2704, 526, 6413],
    ]
    with open(r'C:\Users\isaac\Desktop\2class_diffi.pkl', 'rb') as f:
        diff_2 = pickle.load(f)
    print(type(diff_2))
    diff_dict_2 = {}
    for i in diff_2:
        diff_dict_2[i[0]] = i[1]
    plt.figure(figsize=(10, 5))
    ax_2 = plt.subplot(121)
    plt.xticks(fontsize=16)
    plt.yticks(fontsize=16)
    plt.xlabel('Difficulty learned by GLAD', fontsize=16)
    plt.ylabel(r'$\beta^{(i)^{\prime}}$ predicted by SpeeLFC-D', fontsize=16)
    x_2 = []
    y_2 = []
    for index, i in enumerate(range(50, 100)):
        if i not in [50, 65, 70, 85]:
            continue
        this_file = os.path.join(r'C:\Users\isaac\Desktop\50组难度预测新参数\2\results5', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff_2 = np.load(this_file)
        nan_index_2 = [np.isnan(x).any() for x in predict_diff_2]
        if True in nan_index_2:
            nonan_index_2 = nan_index_2.index(True) - 1
        else:
            nonan_index_2 = -1
        print(i, nonan_index_2)
        print(predict_diff_2[nonan_index_2].reshape(4))
        x_2.extend([math.exp(diff_dict_2[x][0]) for x in number_index_2[index]])
        y_2.extend(predict_diff_2[nonan_index_2].reshape(4))
    for i in range(len(x_2)):
        if x_2[i] > 100:
            x_2[i] = 100
    print(x_2)
    plt.xlim(-10, 110)
    plt.ylim(-1, 520)
    plt.scatter(x_2, y_2)
    ellipse2_1 = Ellipse((0, 126), width=14, height=220, facecolor='none', edgecolor='C0', linestyle='dashed')
    ellipse2_2 = Ellipse((65, 322), width=81, height=220, facecolor='none', edgecolor='C0', linestyle='dashed')
    ax_2.add_patch(ellipse2_1)
    ax_2.add_patch(ellipse2_2)

    number_index_10 = [
        [595, 564, 306, 82],
        [576, 106, 94, 11],
        [479, 467, 463, 93],
        [511, 110, 87, 11],
        [679, 97, 92, 80],
        [604, 104, 91, 22],
        [308, 244, 79, 74],
        [673, 604, 527, 130],
        [677, 633, 79, 78],
        [554, 530, 520, 157],
        [640, 544, 157, 53],
        [677, 673, 493, 51],
        [673, 157, 98, 94],
        [637, 595, 530, 104],
        [585, 511, 308, 97],
        [677, 82, 67, 65],
        [539, 467, 434, 104],
        [595, 546, 466, 97],
        [530, 308, 110, 98],
        [653, 612, 494, 63],
        [633, 596, 491, 67],
        [554, 472, 467, 90],
        [554, 130, 103, 53],
        [666, 653, 306, 130],
        [493, 467, 105, 51],
        [585, 532, 520, 357],
        [544, 308, 93, 90],
        [490, 147, 104, 93],
        [673, 463, 105, 92],
        [679, 673, 130, 82],
        [637, 532, 490, 82],
        [633, 631, 493, 104],
        [663, 604, 493, 102],
        [244, 78, 63, 51],
        [244, 157, 97, 78],
        [612, 212, 73, 68],
        [673, 653, 612, 8],
        [600, 564, 467, 80],
        [637, 439, 98, 11],
        [640, 383, 145, 91],
        [103, 90, 11, 8],
        [640, 434, 94, 78],
        [673, 306, 78, 63],
        [640, 595, 463, 67],
        [545, 544, 483, 75],
        [663, 479, 308, 157],
        [631, 147, 97, 10],
        [633, 545, 102, 74],
        [434, 229, 97, 80],
        [546, 391, 308, 68],
    ]
    with open(r'C:\Users\isaac\Desktop\10class_diffi.pkl', 'rb') as f:
        diff_10 = pickle.load(f)
    print(type(diff_10))
    diff_dict_10 = {}
    for i in diff_10:
        diff_dict_10[i[0]] = i[1]
    music_data = np.load(r'C:\Users\isaac\Desktop\music_data.npz')
    train_data_name = music_data['train_data_name']
    ax_10 = plt.subplot(122)
    plt.xticks(fontsize=16)
    plt.yticks(fontsize=16)
    plt.xlabel('Difficulty learned by GLAD', fontsize=16)
    plt.ylabel(r'$\beta^{(i)^{\prime}}$ predicted by SpeeLFC-D', fontsize=16)
    x_10 = []
    y_10 = []
    for index, i in enumerate(range(50, 100)):
        if i not in [55, 65, 77, 82]:
            continue
        this_file = os.path.join(r'C:\Users\isaac\Desktop\50组难度预测新参数\10\results6', str(i), 'predict_results.npy')
        assert os.path.exists(this_file)
        predict_diff_10 = np.load(this_file)
        nan_index_10 = [np.isnan(x).any() for x in predict_diff_10]
        if True in nan_index_10:
            nonan_index_10 = nan_index_10.index(True) - 1
        else:
            nonan_index_10 = -1
        print(i, nonan_index_10)
        print(predict_diff_10[nonan_index_10].reshape(4))
        x_10.extend([math.exp(diff_dict_10[train_data_name[x]][0]) for x in number_index_10[index]])
        y_10.extend(predict_diff_10[nonan_index_10].reshape(4))
    for i in range(len(x_10)):
        if x_10[i] > 100:
            x_10[i] = 100
    plt.xlim(-10, 110)
    plt.ylim(-1, 520)
    plt.scatter(x_10, y_10)
    ellipse10_1 = Ellipse((0, 178), width=14, height=268, facecolor='none', edgecolor='C0', linestyle='dashed')
    ellipse10_2 = Ellipse((71, 367), width=91, height=292, facecolor='none', edgecolor='C0', linestyle='dashed')
    ax_10.add_patch(ellipse10_1)
    ax_10.add_patch(ellipse10_2)
    plt.figtext(0.26, 0.05, '(a) Dataset: SPC', va="center", ha="center", size=18)
    plt.figtext(0.76, 0.05, '(b) Dataset: MGC', va="center", ha="center", size=18)
    plt.subplots_adjust(top=0.94, bottom=0.24, left=0.1, right=0.96, wspace=0.4)
    plt.savefig('C:\\Users\\isaac\\Desktop\\' + str(i) + 'zong.pdf', format='pdf', dpi=300)
    plt.close()


if __name__ == '__main__':
    all_50()

